// Study material data model
import { z } from 'zod';
import { Timestamp } from 'firebase/firestore';

// Study material validation schema
export const studyMaterialSchema = z.object({
  id: z.string().optional(), // Auto-generated by Firestore
  title: z.string().min(1, 'Title is required'),
  description: z.string().optional(),
  classId: z.string().min(1, 'Class ID is required'),
  subjectId: z.string().min(1, 'Subject ID is required'), // Added subject linking
  lessonId: z.string().optional(), // Optional - can be linked to a specific lesson or be general
  lessonName: z.string().optional(), // Lesson name for display purposes
  teacherId: z.string().min(1, 'Teacher ID is required'),
  week: z.number().min(1, 'Week must be at least 1'),
  weekTitle: z.string().optional(), // Optional title for the week
  year: z.number().min(2020, 'Year must be valid'),
  fileUrl: z.string().url('Valid file URL is required'),
  fileName: z.string().min(1, 'File name is required'),
  fileSize: z.number().min(1, 'File size is required'),
  fileType: z.enum(['pdf', 'doc', 'docx', 'ppt', 'pptx', 'txt', 'image', 'video', 'link', 'other']), // Added 'link' type
  mimeType: z.string().optional(), // For better file type detection
  externalUrl: z.string().url().optional(), // For external links (YouTube, etc.)
  duration: z.number().optional(), // Duration in minutes for videos/audio
  uploadedAt: z.date().default(() => new Date()),
  dueDate: z.date().optional(),
  isRequired: z.boolean().default(false),
  isVisible: z.boolean().default(true),
  order: z.number().default(0), // For ordering within a week
  tags: z.array(z.string()).default([]),
  difficulty: z.enum(['Beginner', 'Intermediate', 'Advanced']).optional(),
  completedBy: z.array(z.string()).default([]), // Array of student IDs who marked as complete
  downloadCount: z.number().default(0),
  viewCount: z.number().default(0), // Track how many times it's been viewed
  createdAt: z.date().default(() => new Date()),
  updatedAt: z.date().default(() => new Date()),
});

// Study material update schema (all fields optional except IDs)
export const studyMaterialUpdateSchema = studyMaterialSchema.partial().extend({
  id: z.string().min(1, 'ID is required'),
  classId: z.string().min(1, 'Class ID is required'),
  subjectId: z.string().min(1, 'Subject ID is required'),
  teacherId: z.string().min(1, 'Teacher ID is required'),
  updatedAt: z.date().default(() => new Date()),
});

// Study material interface
export interface StudyMaterial {
  id: string;
  title: string;
  description?: string;
  classId: string;
  subjectId: string;
  lessonId?: string; // Optional lesson link
  teacherId: string;
  week: number;
  weekTitle?: string;
  year: number;
  fileUrl: string;
  fileName: string;
  fileSize: number;
  fileType: 'pdf' | 'doc' | 'docx' | 'ppt' | 'pptx' | 'txt' | 'image' | 'video' | 'link' | 'other';
  mimeType?: string;
  externalUrl?: string;
  duration?: number;
  uploadedAt: Date;
  dueDate?: Date;
  isRequired: boolean;
  isVisible: boolean;
  order: number;
  tags: string[];
  difficulty?: 'Beginner' | 'Intermediate' | 'Advanced';
  completedBy: string[]; // Array of student IDs who marked as complete
  downloadCount: number;
  viewCount: number;
  createdAt: Date;
  updatedAt: Date;
}

// Study material document in Firestore
export interface StudyMaterialDocument {
  id: string;
  title: string;
  description?: string;
  classId: string;
  subjectId: string;
  lessonId?: string;
  teacherId: string;
  week: number;
  weekTitle?: string;
  year: number;
  fileUrl: string;
  fileName: string;
  fileSize: number;
  fileType: string;
  mimeType?: string;
  externalUrl?: string;
  duration?: number;
  uploadedAt: Timestamp;
  dueDate?: Timestamp;
  isRequired: boolean;
  isVisible: boolean;
  order: number;
  tags: string[];
  difficulty?: string;
  completedBy: string[]; // Array of student IDs
  downloadCount: number;
  viewCount: number;
  createdAt: Timestamp;
  updatedAt: Timestamp;
}

// Study material data for creation
export type StudyMaterialData = Omit<StudyMaterial, 'id' | 'createdAt' | 'updatedAt' | 'completedBy' | 'downloadCount'>;

// Study material data for updates
export type StudyMaterialUpdateData = Partial<Omit<StudyMaterial, 'id' | 'classId' | 'teacherId' | 'createdAt'>>;

// Week timeline interface
export interface WeekTimeline {
  week: number;
  year: number;
  startDate: Date;
  endDate: Date;
  materials: StudyMaterial[];
  completionStats: {
    totalMaterials: number;
    requiredMaterials: number;
    averageCompletion: number; // Percentage
  };
}

// Student completion interface
export interface StudentMaterialCompletion {
  studentId: string;
  studentName: string;
  materialId: string;
  completedAt: Date;
  week: number;
  year: number;
}

// Display interface with additional data for UI
export interface StudyMaterialDisplayData extends StudyMaterialDocument {
  lessonName?: string; // Populated from lesson data
  uploaderName?: string; // Teacher name
  isCompleted?: boolean; // For student view
  completionPercentage?: number; // For teacher view
  formattedFileSize?: string;
  formattedDuration?: string;
  relativeUploadTime?: string;
}

// Helper functions
export function formatFileSize(bytes: number): string {
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
}

export function formatDuration(minutes?: number): string {
  if (!minutes) return '';
  
  if (minutes < 60) {
    return `${minutes} min`;
  }
  
  const hours = Math.floor(minutes / 60);
  const remainingMinutes = minutes % 60;
  
  if (remainingMinutes === 0) {
    return `${hours} hr`;
  }
  
  return `${hours} hr ${remainingMinutes} min`;
}

export function getRelativeTime(date: Date): string {
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
  
  if (diffInSeconds < 60) return 'Just now';
  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;
  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;
  if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)} days ago`;
  
  return date.toLocaleDateString();
}

export default studyMaterialSchema;
