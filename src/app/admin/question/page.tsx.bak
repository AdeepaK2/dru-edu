"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { 
  Question, 
  MCQQuestion, 
  EssayQuestion, 
  QuestionBank 
} from '@/models/questionBankSchema';
import { 
  questionService, 
  questionBankService 
} from '@/apiservices/questionBankFirestoreService';
import QuestionFormWithFirebase from '@/components/questions/QuestionFormWithFirebase';
import { Button } from '@/components/ui';
import { Timestamp, serverTimestamp } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';

// Define subject data structure that extends QuestionBank 
interface SubjectWithQuestionCount extends QuestionBank {
  questionCount: number;
}

export default function QuestionsPage() {
  const [questions, setQuestions] = useState<Question[]>([]);
  const [subjects, setSubjects] = useState<SubjectWithQuestionCount[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filter, setFilter] = useState({
    subjectId: '',
    type: '',
    difficulty: ''
  });
  const [activeView, setActiveView] = useState<'subjects' | 'questions'>('subjects');
  const [selectedSubject, setSelectedSubject] = useState<SubjectWithQuestionCount | null>(null);
  const [showAddQuestionModal, setShowAddQuestionModal] = useState(false);
  const [questionType, setQuestionType] = useState<'mcq' | 'essay'>('mcq');
  const [authToken, setAuthToken] = useState<string | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
    {
      id: "q1",
      title: "Properties of Addition",
      content: "What property of addition is demonstrated by the equation 3 + 5 = 5 + 3?",
      type: "mcq" as const,
      classId: "math-g6",
      className: "Mathematics (Grade 6)",
      points: 5,
      difficultyLevel: "easy" as const,
      lesson: "Basic Number Properties",
      options: [
        { id: "a", text: "Commutative Property", isCorrect: true },
        { id: "b", text: "Associative Property", isCorrect: false },
        { id: "c", text: "Distributive Property", isCorrect: false },
        { id: "d", text: "Identity Property", isCorrect: false }
      ],
      explanation: "The commutative property states that changing the order of addends does not change the sum.",
      createdAt: new Timestamp(Date.now() / 1000, 0),
      updatedAt: new Timestamp(Date.now() / 1000, 0)
    },
    {
      id: "q2",
      title: "Solving One-Step Equations",
      content: "Solve for x: x + 7 = 12",
      type: "mcq" as const,
      classId: "math-g6",
      className: "Mathematics (Grade 6)",
      points: 5,
      difficultyLevel: "medium" as const,
      lesson: "Algebraic Equations",
      options: [
        { id: "a", text: "x = 5", isCorrect: true },
        { id: "b", text: "x = 4", isCorrect: false },
        { id: "c", text: "x = 6", isCorrect: false },
        { id: "d", text: "x = 19", isCorrect: false }
      ],
      explanation: "To solve for x, subtract 7 from both sides: x + 7 - 7 = 12 - 7, which gives x = 5.",
      createdAt: new Timestamp(Date.now() / 1000, 0),
      updatedAt: new Timestamp(Date.now() / 1000, 0)
    },
    {
      id: "q3",
      title: "Essay on Photosynthesis",
      content: "Explain the process of photosynthesis and its importance for life on Earth.",
      type: "essay" as const,
      classId: "science-g6",
      className: "Science (Grade 6)",
      points: 10,
      difficultyLevel: "hard" as const,
      lesson: "Plant Biology",
      suggestedAnswerContent: "Photosynthesis is the process by which plants convert sunlight into energy. The process takes place in the chloroplasts of plant cells, particularly in the leaves. During photosynthesis, plants use carbon dioxide, water, and sunlight to produce glucose and oxygen. This process is essential for life on Earth as it provides oxygen for animals to breathe and is the foundation of most food chains.",
      wordLimit: 300,
      minWordCount: 150,
      createdAt: new Timestamp(Date.now() / 1000, 0),
      updatedAt: new Timestamp(Date.now() / 1000, 0)
    },
    {
      id: "q4",
      title: "Classification of Living Things",
      content: "Which of the following is NOT one of the major taxonomic ranks?",
      type: "mcq" as const,
      classId: "science-g7",
      className: "Science (Grade 7)",
      points: 5,
      difficultyLevel: "medium" as const,
      lesson: "Taxonomy and Classification",
      options: [
        { id: "a", text: "Kingdom", isCorrect: false },
        { id: "b", text: "Section", isCorrect: true },
        { id: "c", text: "Phylum", isCorrect: false },
        { id: "d", text: "Family", isCorrect: false }
      ],
      explanation: "The major taxonomic ranks are Kingdom, Phylum, Class, Order, Family, Genus, and Species. 'Section' is not one of them.",
      createdAt: new Timestamp(Date.now() / 1000, 0),
      updatedAt: new Timestamp(Date.now() / 1000, 0)
    },
    {
      id: "q5",
      title: "Essay on Shakespeare",
      content: "Analyze the key themes in Shakespeare's 'Romeo and Juliet'.",
      type: "essay" as const,
      classId: "english-g8",
      className: "English (Grade 8)",
      points: 15,
      difficultyLevel: "hard" as const,
      lesson: "Classic Literature",
      suggestedAnswerContent: "Shakespeare's 'Romeo and Juliet' explores several key themes: love, fate, violence, and youth. The play portrays love as a violent, ecstatic, overpowering force that supersedes all other values and loyalties. Fate is shown through the 'star-crossed lovers' whose deaths are predetermined. The theme of violence is evident in the ongoing feud between the families and its fatal consequences. Youth is portrayed through the impulsiveness and passion of the main characters.",
      wordLimit: 500,
      minWordCount: 250,
      createdAt: new Timestamp(Date.now() / 1000, 0),
      updatedAt: new Timestamp(Date.now() / 1000, 0)
    },
    {
      id: "q6",
      title: "Fractions and Decimals",
      content: "What is 3/4 expressed as a decimal?",
      type: "mcq" as const,
      classId: "math-g6",
      className: "Mathematics (Grade 6)",
      points: 3,
      difficultyLevel: "easy" as const,
      lesson: "Fractions and Decimals",
      options: [
        { id: "a", text: "0.75", isCorrect: true },
        { id: "b", text: "0.34", isCorrect: false },
        { id: "c", text: "0.67", isCorrect: false },
        { id: "d", text: "0.7", isCorrect: false }
      ],
      explanation: "To convert a fraction to a decimal, divide the numerator by the denominator: 3 ÷ 4 = 0.75",
      createdAt: new Timestamp(Date.now() / 1000, 0),
      updatedAt: new Timestamp(Date.now() / 1000, 0)
    },
    {
      id: "q7",
      title: "States of Matter",
      content: "Which of the following is an example of a gas?",
      type: "mcq" as const,
      classId: "science-g6",
      className: "Science (Grade 6)",
      points: 4,
      difficultyLevel: "easy" as const,
      lesson: "States of Matter",
      options: [
        { id: "a", text: "Ice", isCorrect: false },
        { id: "b", text: "Wood", isCorrect: false },
        { id: "c", text: "Oxygen", isCorrect: true },
        { id: "d", text: "Mercury", isCorrect: false }
      ],
      explanation: "Oxygen exists as a gas at room temperature and pressure. It fills the available space and has no fixed shape or volume.",
      createdAt: new Timestamp(Date.now() / 1000, 0),
      updatedAt: new Timestamp(Date.now() / 1000, 0)
    },
    {
      id: "q8",
      title: "Essay on Environmental Conservation",
      content: "Discuss the importance of reducing plastic usage and suggest three practical ways to reduce plastic waste in everyday life.",
      type: "essay" as const,
      classId: "science-g7",
      className: "Science (Grade 7)",
      points: 10,
      difficultyLevel: "medium" as const,
      lesson: "Environmental Science",
      suggestedAnswerContent: "Reducing plastic usage is crucial for environmental conservation as plastics take hundreds of years to decompose and harm wildlife, particularly marine animals. Three practical ways to reduce plastic waste include: using reusable shopping bags instead of plastic bags; avoiding single-use plastic bottles by carrying a refillable water bottle; and choosing products with minimal plastic packaging. By making these small changes in everyday life, individuals can significantly reduce their plastic footprint and contribute to a healthier environment.",
      wordLimit: 350,
      minWordCount: 200,
      createdAt: new Timestamp(Date.now() / 1000, 0),
      updatedAt: new Timestamp(Date.now() / 1000, 0)
    },
    {
      id: "q9",
      title: "Pythagorean Theorem",
      content: "In a right triangle, if the lengths of the two legs are 3 units and 4 units, what is the length of the hypotenuse?",
      type: "mcq" as const,
      classId: "math-g8",
      className: "Mathematics (Grade 8)",
      points: 6,
      difficultyLevel: "medium" as const,
      lesson: "Geometry and Triangles",
      options: [
        { id: "a", text: "7 units", isCorrect: false },
        { id: "b", text: "5 units", isCorrect: true },
        { id: "c", text: "6 units", isCorrect: false },
        { id: "d", text: "√7 units", isCorrect: false }
      ],
      explanation: "According to the Pythagorean theorem, in a right triangle: a² + b² = c² where c is the hypotenuse. So 3² + 4² = c², 9 + 16 = c², 25 = c², c = 5 units.",
      createdAt: new Timestamp(Date.now() / 1000, 0),
      updatedAt: new Timestamp(Date.now() / 1000, 0)
    },
    {
      id: "q10",
      title: "Parts of Speech",
      content: "Which of the following is NOT a part of speech in English grammar?",
      type: "mcq" as const,
      classId: "english-g7",
      className: "English (Grade 7)",
      points: 5,
      difficultyLevel: "medium" as const,
      lesson: "Grammar Fundamentals",
      options: [
        { id: "a", text: "Noun", isCorrect: false },
        { id: "b", text: "Adjective", isCorrect: false },
        { id: "c", text: "Determiner", isCorrect: false },
        { id: "d", text: "Emphasizer", isCorrect: true }
      ],
      explanation: "The traditional parts of speech include nouns, pronouns, verbs, adjectives, adverbs, prepositions, conjunctions, interjections, and determiners. 'Emphasizer' is not a recognized part of speech.",
      createdAt: new Timestamp(Date.now() / 1000, 0),
      updatedAt: new Timestamp(Date.now() / 1000, 0)
    }
  ];

  useEffect(() => {
    // Simulate loading
    setLoading(true);
    
    // Simulate API delay
    const timer = setTimeout(() => {
      try {
        // Apply filtering
        let filteredQuestions = dummyQuestions;
        
        if (filter.classId) {
          filteredQuestions = filteredQuestions.filter(q => q.classId === filter.classId);
        }
        
        if (filter.type) {
          filteredQuestions = filteredQuestions.filter(q => q.type === filter.type);
        }
        
        if (filter.difficulty) {
          filteredQuestions = filteredQuestions.filter(q => q.difficultyLevel === filter.difficulty);
        }
        
        setQuestions(filteredQuestions);
        setLoading(false);
        setError(null);
      } catch (err: any) {
        console.error("Error with dummy data:", err);
        setError("Failed to load questions");
        setLoading(false);
      }
    }, 800); // simulate network delay
    
    return () => clearTimeout(timer);
  }, [filter]);

  const handleFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFilter(prev => ({ ...prev, [name]: value }));
  };
  const handleDeleteQuestion = async (id: string) => {
    if (!window.confirm('Are you sure you want to delete this question?')) {
      return;
    }
    
    try {
      // Remove the question from state
      setQuestions(prev => prev.filter(q => q.id !== id));
    } catch (err: any) {
      console.error("Error deleting question:", err);
      alert(`Error: ${err.message || 'Failed to delete question'}`);
    }
  };
  // Handle subject selection
  const handleSelectSubject = (subject: Subject) => {
    setSelectedSubject(subject);
    setActiveView('questions');
    setFilter({
      ...filter, 
      classId: subject.id
    });
  };

  // Handle adding a new question
  const toggleAddQuestionModal = () => {
    setShowAddQuestionModal(!showAddQuestionModal);
    if (!showAddQuestionModal && selectedSubject) {
      setNewQuestion({
        ...newQuestion,
        classId: selectedSubject.id,
        className: `${selectedSubject.name} (${selectedSubject.grade})`
      });
    }
  };

  const handleQuestionTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setQuestionType(e.target.value as 'mcq' | 'essay');
  };

  const handleQuestionInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    if (name.startsWith('option-')) {
      const optionIndex = parseInt(name.split('-')[1]);
      const newOptions = [...newQuestion.options];
      newOptions[optionIndex] = {
        ...newOptions[optionIndex],
        text: value
      };
      setNewQuestion({...newQuestion, options: newOptions});
    } else if (name === 'correct-option') {
      const optionIndex = parseInt(value);
      const newOptions = newQuestion.options.map((opt, idx) => ({
        ...opt,
        isCorrect: idx === optionIndex
      }));
      setNewQuestion({...newQuestion, options: newOptions});
    } else {
      setNewQuestion({
        ...newQuestion,
        [name]: type === 'number' ? parseInt(value) : value
      });
    }
  };  const handleSubmitQuestion = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!window.confirm('This will add a new question. In a real application, this would save to a database.')) {
      return;
    }
    
    try {
      setLoading(true);
      
      // Create a new question object with the form data
      const newQuestionObj = {
        id: `q${Date.now()}`, // Generate a unique ID
        ...newQuestion,
        type: questionType,
        createdAt: new Timestamp(Date.now() / 1000, 0),
        updatedAt: new Timestamp(Date.now() / 1000, 0)
      };
      
      // Add the new question to our questions state
      setQuestions(prevQuestions => [...prevQuestions, newQuestionObj]);
      
      alert('Question added successfully!');
      setShowAddQuestionModal(false);
      
      // Reset form
      setNewQuestion({
        title: '',
        content: '',
        classId: selectedSubject?.id || '',
        className: selectedSubject ? `${selectedSubject.name} (${selectedSubject.grade})` : '',
        points: 5,
        difficultyLevel: 'medium',
        options: [
          { id: '1', text: '', isCorrect: true },
          { id: '2', text: '', isCorrect: false },
          { id: '3', text: '', isCorrect: false },
          { id: '4', text: '', isCorrect: false }
        ],
        explanation: '',
        lesson: '',
        suggestedAnswerContent: '',
        wordLimit: 500,
        minWordCount: 100
      });
    } catch (err: any) {
      console.error("Error adding question:", err);
      alert(`Error: ${err.message || 'Failed to add question'}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="px-6 py-8 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Question Bank</h1>
            <div className="mt-1 flex items-center">
              <Link href="/admin/question-banks" className="text-blue-600 hover:text-blue-800 text-sm flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                </svg>
                Manage Question Banks
              </Link>
            </div>
            {selectedSubject && (
              <div className="flex items-center mt-2">
                <button
                  onClick={() => setActiveView('subjects')}
                  className="text-blue-600 hover:text-blue-800 flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                  </svg>
                  Back to Subjects
                </button>
                <span className="mx-2 text-gray-500">/</span>
                <span className="text-gray-700">{selectedSubject.name} ({selectedSubject.grade})</span>
              </div>
            )}
          </div>          {selectedSubject && (
            <div className="flex space-x-3">
              <button 
                onClick={() => {
                  setQuestionType('mcq');
                  toggleAddQuestionModal();
                }}
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                Add MCQ
              </button>
              <button 
                onClick={() => {
                  setQuestionType('essay');
                  toggleAddQuestionModal();
                }}
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md flex items-center"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd" />
                </svg>
                Add Essay
              </button>
            </div>
          )}
        </div>

        {/* Subject Selection View */}
        {activeView === 'subjects' && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {dummySubjects.map((subject) => (
              <div 
                key={subject.id} 
                onClick={() => handleSelectSubject(subject)}
                className="bg-white rounded-lg shadow-md p-6 cursor-pointer transition-transform transform hover:scale-105 border border-transparent hover:border-blue-500"
              >
                <div className="mb-2 flex justify-between items-start">
                  <h3 className="text-xl font-semibold text-gray-800">{subject.name}</h3>
                  <span className="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                    {subject.grade}
                  </span>
                </div>
                <div className="mb-4 text-sm text-gray-600">
                  Subject ID: {subject.id}
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-500">
                    {subject.questionCount} Questions
                  </span>
                  <button className="text-blue-600 hover:text-blue-800 font-medium text-sm">
                    View Questions
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Questions List View */}        {activeView === 'questions' && (
          <>
            {/* Question Type Tabs */}
            <div className="flex mb-6 space-x-4">
              <button
                onClick={() => setFilter(prev => ({ ...prev, type: '' }))}
                className={`px-6 py-3 rounded-lg font-medium text-sm ${
                  filter.type === '' 
                  ? 'bg-blue-600 text-white shadow-md' 
                  : 'bg-white text-gray-700 border border-gray-200 hover:bg-gray-50'
                }`}
              >
                All Questions
              </button>
              <button
                onClick={() => setFilter(prev => ({ ...prev, type: 'mcq' }))}
                className={`px-6 py-3 rounded-lg font-medium text-sm ${
                  filter.type === 'mcq' 
                  ? 'bg-green-600 text-white shadow-md' 
                  : 'bg-white text-gray-700 border border-gray-200 hover:bg-gray-50'
                }`}
              >
                Multiple Choice
              </button>
              <button
                onClick={() => setFilter(prev => ({ ...prev, type: 'essay' }))}
                className={`px-6 py-3 rounded-lg font-medium text-sm ${
                  filter.type === 'essay' 
                  ? 'bg-purple-600 text-white shadow-md' 
                  : 'bg-white text-gray-700 border border-gray-200 hover:bg-gray-50'
                }`}
              >
                Essay Questions
              </button>
            </div>

            {/* Difficulty Filter */}
            <div className="bg-white p-4 rounded-lg shadow mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Difficulty</label>
              <div className="flex space-x-4">
                <button
                  onClick={() => setFilter(prev => ({ ...prev, difficulty: '' }))}
                  className={`px-4 py-2 rounded-md text-sm ${
                    filter.difficulty === '' ? 'bg-gray-200 font-medium' : 'bg-white border border-gray-200'
                  }`}
                >
                  All
                </button>
                <button
                  onClick={() => setFilter(prev => ({ ...prev, difficulty: 'easy' }))}
                  className={`px-4 py-2 rounded-md text-sm ${
                    filter.difficulty === 'easy' ? 'bg-green-100 text-green-800 font-medium' : 'bg-white border border-gray-200'
                  }`}
                >
                  Easy
                </button>
                <button
                  onClick={() => setFilter(prev => ({ ...prev, difficulty: 'medium' }))}
                  className={`px-4 py-2 rounded-md text-sm ${
                    filter.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800 font-medium' : 'bg-white border border-gray-200'
                  }`}
                >
                  Medium
                </button>
                <button
                  onClick={() => setFilter(prev => ({ ...prev, difficulty: 'hard' }))}
                  className={`px-4 py-2 rounded-md text-sm ${
                    filter.difficulty === 'hard' ? 'bg-red-100 text-red-800 font-medium' : 'bg-white border border-gray-200'
                  }`}
                >
                  Hard
                </button>
              </div>
            </div>

            {/* Loading state */}
            {loading && (
              <div className="text-center py-8">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-4 border-gray-300 border-t-blue-600"></div>
                <p className="mt-2 text-gray-600">Loading questions...</p>
              </div>
            )}

            {/* Error state */}
            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-4">
                <p>{error}</p>
              </div>
            )}            {/* Questions list */}
            {!loading && !error && (
              <div className="bg-white rounded-lg shadow overflow-hidden">
                {/* MCQ Questions Table */}
                {(filter.type === '' || filter.type === 'mcq') && questions.filter(q => q.type === 'mcq').length > 0 && (
                  <div className="mb-8">
                    <div className="bg-green-50 px-6 py-3 border-b border-green-200">
                      <h3 className="text-lg font-medium text-green-800">Multiple Choice Questions</h3>
                    </div>
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Title
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Topic/Lesson
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Difficulty
                          </th>                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Answer Options
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Points
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {questions.filter(q => q.type === 'mcq').map((question) => {
                          // Find the correct answer for MCQ
                          const mcqQuestion = question as MCQQuestion;
                          const correctOption = mcqQuestion.options.find(opt => opt.isCorrect);
                          
                          return (
                            <tr key={question.id} className="hover:bg-gray-50">
                              <td className="px-6 py-4 text-sm font-medium text-gray-900">
                                <div className="max-w-xs truncate">{question.title}</div>
                                <div className="text-xs text-gray-500 mt-1 truncate">{question.content.substring(0, 50)}...</div>
                              </td>
                              <td className="px-6 py-4 text-sm text-gray-500">
                                {(mcqQuestion.lesson && mcqQuestion.lesson.length > 0) 
                                  ? mcqQuestion.lesson 
                                  : <span className="text-gray-400">Not specified</span>
                                }
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  question.difficultyLevel === 'easy' ? 'bg-green-100 text-green-800' :
                                  question.difficultyLevel === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                                  'bg-red-100 text-red-800'
                                }`}>
                                  {question.difficultyLevel.charAt(0).toUpperCase() + question.difficultyLevel.slice(1)}
                                </span>
                              </td>                              <td className="px-6 py-4 text-sm text-gray-500">
                                <div className="space-y-1">
                                  {mcqQuestion.options.map((option) => (
                                    <div key={option.id} className={option.isCorrect 
                                      ? "text-green-700 font-medium flex items-center" 
                                      : "text-gray-600 flex items-center"}>
                                      {option.isCorrect && (
                                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                                        </svg>
                                      )}
                                      <span className={option.isCorrect ? "px-2 py-1 bg-green-50 border border-green-200 rounded" : ""}>
                                        {option.text}
                                      </span>
                                    </div>
                                  ))}
                                </div>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {question.points}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <div className="flex space-x-2">
                                  <Link 
                                    href={`/admin/question/view/${question.id}`}
                                    className="text-indigo-600 hover:text-indigo-900"
                                  >
                                    View
                                  </Link>
                                  <Link 
                                    href={`/admin/question/edit/${question.id}`}
                                    className="text-blue-600 hover:text-blue-900"
                                  >
                                    Edit
                                  </Link>
                                  <button
                                    onClick={() => handleDeleteQuestion(question.id)}
                                    className="text-red-600 hover:text-red-900"
                                  >
                                    Delete
                                  </button>
                                </div>
                              </td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                )}
                
                {/* Essay Questions Table */}
                {(filter.type === '' || filter.type === 'essay') && questions.filter(q => q.type === 'essay').length > 0 && (
                  <div>
                    <div className="bg-purple-50 px-6 py-3 border-b border-purple-200">
                      <h3 className="text-lg font-medium text-purple-800">Essay Questions</h3>
                    </div>
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Title
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Topic/Lesson
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Difficulty
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Word Requirements
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Points
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {questions.filter(q => q.type === 'essay').map((question) => {
                          const essayQuestion = question as EssayQuestion;
                          
                          return (
                            <tr key={question.id} className="hover:bg-gray-50">
                              <td className="px-6 py-4 text-sm font-medium text-gray-900">
                                <div className="max-w-xs truncate">{question.title}</div>
                                <div className="text-xs text-gray-500 mt-1 truncate">{question.content.substring(0, 50)}...</div>
                              </td>
                              <td className="px-6 py-4 text-sm text-gray-500">
                                {(essayQuestion.lesson && essayQuestion.lesson.length > 0) 
                                  ? essayQuestion.lesson 
                                  : <span className="text-gray-400">Not specified</span>
                                }
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  question.difficultyLevel === 'easy' ? 'bg-green-100 text-green-800' :
                                  question.difficultyLevel === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                                  'bg-red-100 text-red-800'
                                }`}>
                                  {question.difficultyLevel.charAt(0).toUpperCase() + question.difficultyLevel.slice(1)}
                                </span>
                              </td>
                              <td className="px-6 py-4 text-sm text-gray-500">
                                <span>Min: {essayQuestion.minWordCount} words</span>
                                <br />
                                <span>Max: {essayQuestion.wordLimit} words</span>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {question.points}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <div className="flex space-x-2">
                                  <Link 
                                    href={`/admin/question/view/${question.id}`}
                                    className="text-indigo-600 hover:text-indigo-900"
                                  >
                                    View
                                  </Link>
                                  <Link 
                                    href={`/admin/question/edit/${question.id}`}
                                    className="text-blue-600 hover:text-blue-900"
                                  >
                                    Edit
                                  </Link>
                                  <button
                                    onClick={() => handleDeleteQuestion(question.id)}
                                    className="text-red-600 hover:text-red-900"
                                  >
                                    Delete
                                  </button>
                                </div>
                              </td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                )}
                
                {/* No Questions Message */}
                {questions.length === 0 && (
                  <div className="px-6 py-8 text-center text-gray-500">
                    No questions found for this subject. Click 'Add New Question' to create one.
                  </div>
                )}
              </div>
            )}
          </>
        )}
        
        {/* Add Question Modal */}
        {showAddQuestionModal && (
          <div className="fixed inset-0 z-50 overflow-y-auto">
            <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
              {/* Background overlay */}
              <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={toggleAddQuestionModal}></div>
              
              {/* Modal panel */}
              <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-3xl sm:w-full">
                <form onSubmit={handleSubmitQuestion}>
                  <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div className="sm:flex sm:items-start">
                      <div className="w-full">                        <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
                          Add New {questionType === 'mcq' ? 'Multiple Choice' : 'Essay'} Question to {selectedSubject?.name} ({selectedSubject?.grade})
                        </h3>
                        
                        <div className="grid grid-cols-1 gap-6">                          {/* Question Type - Now set via button before modal opens */}
                          
                          {/* Question Title */}
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                              Question Title
                            </label>
                            <input
                              type="text"
                              name="title"
                              value={newQuestion.title}
                              onChange={handleQuestionInputChange}
                              className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                              placeholder="Enter a title for the question"
                              required
                            />
                          </div>
                          
                          {/* Question Content */}
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                              Question Content
                            </label>
                            <textarea
                              name="content"
                              value={newQuestion.content}
                              onChange={handleQuestionInputChange}
                              className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                              placeholder="Enter the question content"
                              rows={4}
                              required
                            />
                          </div>
                          
                          {/* MCQ Options */}
                          {questionType === 'mcq' && (
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Answer Options (select one correct answer)
                              </label>
                              <div className="space-y-3">
                                {newQuestion.options.map((option, index) => (
                                  <div key={option.id} className="flex items-center">
                                    <input
                                      type="radio"
                                      name="correct-option"
                                      value={index}
                                      checked={option.isCorrect}
                                      onChange={handleQuestionInputChange}
                                      className="h-4 w-4 text-blue-600 focus:ring-blue-500"
                                      required
                                    />
                                    <input
                                      type="text"
                                      name={`option-${index}`}
                                      value={option.text}
                                      onChange={handleQuestionInputChange}
                                      className="ml-3 flex-1 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                      placeholder={`Option ${index + 1}`}
                                      required
                                    />
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                          
                          {/* MCQ Explanation */}
                          {questionType === 'mcq' && (
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Explanation
                              </label>
                              <textarea
                                name="explanation"
                                value={newQuestion.explanation}
                                onChange={handleQuestionInputChange}
                                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="Explain why the correct answer is correct"
                                rows={3}
                                required
                              />
                            </div>
                          )}
                          
                          {/* Essay Suggested Answer */}
                          {questionType === 'essay' && (
                            <>
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Suggested Answer
                                </label>
                                <textarea
                                  name="suggestedAnswerContent"
                                  value={newQuestion.suggestedAnswerContent}
                                  onChange={handleQuestionInputChange}
                                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                  placeholder="Suggested answer for the essay question"
                                  rows={4}
                                  required
                                />
                              </div>
                              
                              <div className="grid grid-cols-2 gap-4">
                                <div>
                                  <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Word Limit
                                  </label>
                                  <input
                                    type="number"
                                    name="wordLimit"
                                    value={newQuestion.wordLimit}
                                    onChange={handleQuestionInputChange}
                                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    min={1}
                                    required
                                  />
                                </div>
                                
                                <div>
                                  <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Minimum Word Count
                                  </label>
                                  <input
                                    type="number"
                                    name="minWordCount"
                                    value={newQuestion.minWordCount}
                                    onChange={handleQuestionInputChange}
                                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    min={1}
                                    required
                                  />
                                </div>
                              </div>
                            </>
                          )}
                          
                          {/* Common Fields */}
                          <div className="grid grid-cols-2 gap-4">
                            {/* Lesson */}
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Lesson
                              </label>
                              <input
                                type="text"
                                name="lesson"
                                value={newQuestion.lesson}
                                onChange={handleQuestionInputChange}
                                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="Enter the lesson name"
                                required
                              />
                            </div>
                            
                            {/* Difficulty Level */}
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Difficulty Level
                              </label>
                              <select
                                name="difficultyLevel"
                                value={newQuestion.difficultyLevel}
                                onChange={handleQuestionInputChange}
                                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                required
                              >
                                <option value="easy">Easy</option>
                                <option value="medium">Medium</option>
                                <option value="hard">Hard</option>
                              </select>
                            </div>
                            
                            {/* Points */}
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Points
                              </label>
                              <input
                                type="number"
                                name="points"
                                value={newQuestion.points}
                                onChange={handleQuestionInputChange}
                                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                min={1}
                                max={100}
                                required
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button
                      type="submit"
                      className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
                    >
                      Add Question
                    </button>
                    <button
                      type="button"
                      onClick={toggleAddQuestionModal}
                      className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm"
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}